title: "Partial Type Constructors; Or, Making ad hoc datatypes less ad hoc"
authors:
  - name: Mark P. Jones
    tweag: false
  - name: J. Garrett Morris
    tweag: false
  - name: Richard A. Eisenberg
    tweag: true
status: "POPL 2020"
links:
  - ["Link", "https://doi.org/10.1145/3371108"]
  # - ["Arxiv", "https://arxiv.org/abs/2011.04070"]
tags: ["haskell", "dependent types"]
date: "2021-01"
abstract: >
  Functional programming languages assume that type constructors are total.
  Yet functional programmers know better: counterexamples range from container
  types that make limiting assumptions about their contents (e.g., requiring
  computable equality or ordering functions) to type families with defining
  equations only over certain choices of arguments. We present a language
  design and formal theory of partial type constructors, capturing the domains
  of type constructors using qualified types. Our design is both simple and
  expressive: we support partial datatypes as first-class citizens (including
  as instances of parametric abstractions, such as the Haskell Functor and
  Monad classes), and show a simple type elaboration algorithm that avoids
  placing undue annotation burden on programmers. We show that our type system
  rejects ill-defined types and can be compiled to a semantic model based on
  System F. Finally, we have conducted an experimental analysis of a body of
  Haskell code, using a proof-of-concept implementation of our system; while
  there are cases where our system requires additional annotations, these
  cases are rarely encountered in practical Haskell code.
