title: "Kinds are Calling Conventions"
authors:
  - name: Paul Downen
    tweag: false
  - name: Zena M. Ariola
    tweag: false
  - name: Simon Peyton Jones
    tweag: false
  - name: Richard A. Eisenberg
    tweag: true
status: "ICFP 2020"
links:
  - ["Link", "https://doi.org/10.1145/3408986"]
  # - ["Arxiv", "https://arxiv.org/abs/2011.04070"]
tags: ["haskell", "unboxed types"]
date: "2020-08"
abstract: >
  A language supporting polymorphism is a boon to programmers: they can
  express complex ideas once and reuse functions in a variety of situations.
  However, polymorphism is pain for compilers tasked with producing efficient
  code that manipulates concrete values.

  This paper presents a new intermediate language that allows for efficient
  static compilation, while still supporting flexible polymorphism.
  Specifically, it permits polymorphism over not only the types of values, but
  also the representation of values, the arity of primitive machine functions,
  and the evaluation order of arguments---all three of which are useful in
  practice. The key insight is to encode information about a value's calling
  convention in the kind of its type, rather than in the type itself.