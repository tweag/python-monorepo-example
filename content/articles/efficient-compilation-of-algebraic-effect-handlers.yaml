title: "Efficient Compilation of Algebraic Effect Handlers"
authors:
  - Georgios Karachalias
    tweag: true
  - Filip Koprivec
    tweag: false
  - Matija Pretnar
    tweag: false
  - Tom Schrijvers
    tweag: false
status: "OOPSLA 2021"
links:
  - ["Link", "https://doi.org/10.1145/3485479"]
  - ["Zenodo", "https://zenodo.org/record/5497862"]
# pdf: "efficient-compilation-of-algebraic-effect-handlers"
tags: ["algebraic effect handlers", "optimising compilation", "ocaml"]
date: "2021-10"
abstract: >
  The popularity of algebraic effect handlers as a programming language feature
  for user-defined computational effects is steadily growing. Yet, even though
  efficient runtime representations have already been studied, most handler-based
  programs are still much slower than hand-written code.

  This paper shows that the performance gap can be drastically narrowed (in some
  cases even closed) by means of type-and-effect directed optimising compilation.
  Our approach consists of source-to-source transformations in two phases of the
  compilation pipeline. Firstly, elementary rewrites, aided by judicious function
  specialisation, exploit the explicit type and effect information of the
  compiler's core language to aggressively reduce handler applications.
  Secondly, after erasing the effect information further rewrites in the backend
  of the compiler emit tight code.

  This work comes with a practical implementation: an optimising compiler from
  Eff, an ML style language with algebraic effect handlers, to OCaml.
  Experimental evaluation with this implementation demonstrates that in a number
  of benchmarks, our approach eliminates much of the overhead of handlers,
  outperforms capability-passing style compilation and yields competitive
  performance compared to hand-written OCaml code as well Multicore OCaml's
  dedicated runtime support.
