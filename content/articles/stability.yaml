title: "Seeking Stability by being Lazy and Shallow: Lazy and shallow instantiation is user friendly"
authors:
  - name: Gert-Jan Bottu
    tweag: true
 # actually: I don't know whether Gert-Jan is tweag. He was an intern, though this
 # was submitted long after he left.
  - name: Richard A. Eisenberg
    tweag: true
status: "Haskell Symposium 2021"
links:
  - ["Link", "https://doi.org/10.1145/3471874.3472985"]
  # - ["Arxiv", "https://arxiv.org/abs/2103.06127"]
tags: ["haskell", "ghc", "inference"]
date: "2021-08"
abstract: >
  Designing a language feature often requires a choice between several,
  similarly expressive possibilities. Given that user studies are generally
  impractical, we propose using stability as a way of making such decisions.
  Stability is a measure of whether the meaning of a program alters under
  small, seemingly innocuous changes in the code (e.g., inlining).

  Directly motivated by a need to pin down a feature in GHC/Haskell, we apply
  this notion of stability to analyse four approaches to the instantiation of
  polymorphic types, concluding that the most stable approach is lazy
  (instantiate a polytype only when absolutely necessary) and shallow
  (instantiate only top-level type variables, not variables that appear after
  explicit arguments).

